plugins {
	id 'net.minecraftforge.gradle' version '5.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'eclipse'
	id 'maven-publish'
}

def full_mod_version = "${mc_version}-${mod_version}"
version = full_mod_version

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
	// Simply re-run your setup task after changing the mappings to update your workspace.
	//mappings channel: "official", version: mc_version
	mappings channel: 'parchment', version: "${project.parchment_version}-${project.mc_version}"
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')
			
			// debug log spam
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			
			mods {
				solcarrot {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			
			// debug log spam
			//property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			
			mods {
				solcarrot {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			
			// debug log spam
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			property 'forge.logging.console.level', 'debug'
			
			args '--mod', 'solcarrot', '--all', '--output', file('src/generated/resources/')
			
			mods {
				solcarrot {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	//forge_version = "${project.forge_mc_version}-${project.forge_version}"
	//minecraft "net.minecraftforge:forge:${forge_version}"
	//minecraft "net.minecraftforge:forge:${project.forge_mc_version}-${project.forge_version}"
	minecraft "net.minecraftforge:forge:${project.forge_version}"
	
	// You may put jars on which you depend on in ./libs or you may define them like so..
	// compile "some.group:artifact:version:classifier"
	// compile "some.group:artifact:version"
	
	// Real examples
	// compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	// compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
	
	// The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
	// provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// These dependencies get remapped to your current MCP mappings
	// deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	sourceSets {
		main {
			exclude '**/*.psd'
		}
	}
	
	manifest {
		attributes([
			"Specification-Title": "solcarrot",
			"Specification-Vendor": "solcarrotsareus",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": "${full_mod_version}",
			"Implementation-Vendor" :"solcarrotsareus",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}
